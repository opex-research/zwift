{
  "contracts": {
    "src/OnRamper.sol": {
      "OnRamper": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "onRamper",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "offRamper",
                "type": "address"
              },
              {
                "internalType": "string",
                "name": "onRampersEmail",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "offRampersEmail",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "transactionSenderEmail",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "transactionReceiverEmail",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "transactionAmount",
                "type": "uint256"
              }
            ],
            "name": "verifyPayPalTransaction",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": {
          "optimizer_settings": {
            "is_debug_logging_enabled": false,
            "is_fallback_to_size_enabled": false,
            "is_system_request_memoization_disabled": true,
            "is_verify_each_enabled": false,
            "level_back_end": "Aggressive",
            "level_middle_end": "Aggressive",
            "level_middle_end_size": "Zero"
          },
          "solc_metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onRamper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offRamper\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"onRampersEmail\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"offRampersEmail\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transactionSenderEmail\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transactionReceiverEmail\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"transactionAmount\",\"type\":\"uint256\"}],\"name\":\"verifyPayPalTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/OnRamper.sol\":\"OnRamper\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/OnRamper.sol\":{\"keccak256\":\"0x9b59a752338656593eb0ddc388c588fd19f0166bad2ae9a725dced5646ae71f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://15359554794389df25e120e13ae00ec20b01abc9b539c834d42c57f67478e830\",\"dweb:/ipfs/QmdtTrv8YJYKwkZxPqUCz1TtYTi5g4j9JaWPQaeRojPt3R\"]}},\"version\":1}",
          "solc_version": "0.8.24",
          "solc_zkvm_edition": null,
          "zk_version": "1.4.0"
        },
        "evm": {
          "legacyAssembly": null,
          "assembly": "\t.text\n\t.file\t\"OnRamper.sol:OnRamper\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[8]\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\t128, r0, r3\n\tst.1\t64, r3\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tand\t@CPI0_2[0], r2, r2\n\tsub.s!\t@CPI0_3[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t256, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_4[0], r2, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t68, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_4[0], r2, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t100, r1, r2\n\tld\tr2, r5\n\tsub.s!\t@CPI0_5[0], r5, r2\n\tjump.gt\t@.BB0_2\n\tadd\t35, r5, r2\n\tadd\t@CPI0_6[0], r0, r4\n\tsub!\tr2, r3, r6\n\tadd\tr0, r0, r6\n\tadd.ge\tr4, r0, r6\n\tand\t@CPI0_6[0], r2, r2\n\tsub!\tr2, r0, r7\n\tadd.ge\tr0, r0, r4\n\tsub.s!\t@CPI0_6[0], r2, r2\n\tadd.ne\tr6, r0, r4\n\tsub!\tr4, r0, r2\n\tjump.ne\t@.BB0_2\n\tadd\t4, r5, r4\n\tptr.add\tr1, r4, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_5[0], r2, r6\n\tjump.gt\t@.BB0_2\n\tadd\tr5, r2, r5\n\tadd\t36, r5, r5\n\tsub!\tr5, r3, r5\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t132, r1, r5\n\tld\tr5, r5\n\tsub.s!\t@CPI0_5[0], r5, r6\n\tjump.gt\t@.BB0_2\n\tadd\t35, r5, r6\n\tadd\t@CPI0_6[0], r0, r7\n\tsub!\tr6, r3, r8\n\tadd\tr0, r0, r8\n\tadd.ge\tr7, r0, r8\n\tand\t@CPI0_6[0], r6, r6\n\tsub!\tr6, r0, r9\n\tadd.ge\tr0, r0, r7\n\tsub.s!\t@CPI0_6[0], r6, r6\n\tadd.ne\tr8, r0, r7\n\tsub!\tr7, r0, r6\n\tjump.ne\t@.BB0_2\n\tadd\t4, r5, r6\n\tptr.add\tr1, r6, r6\n\tld\tr6, r10\n\tsub.s!\t@CPI0_5[0], r10, r6\n\tjump.gt\t@.BB0_2\n\tadd\t36, r5, r11\n\tadd\tr10, r11, r5\n\tsub!\tr5, r3, r5\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t164, r1, r5\n\tld\tr5, r5\n\tsub.s!\t@CPI0_5[0], r5, r6\n\tjump.gt\t@.BB0_2\n\tadd\t35, r5, r6\n\tadd\t@CPI0_6[0], r0, r7\n\tsub!\tr6, r3, r8\n\tadd\tr0, r0, r8\n\tadd.ge\tr7, r0, r8\n\tand\t@CPI0_6[0], r6, r6\n\tsub!\tr6, r0, r9\n\tadd.ge\tr0, r0, r7\n\tsub.s!\t@CPI0_6[0], r6, r6\n\tadd.ne\tr8, r0, r7\n\tsub!\tr7, r0, r6\n\tjump.ne\t@.BB0_2\n\tadd\t4, r5, stack-[8]\n\tptr.add.s\tstack-[8], r1, r6\n\tld\tr6, r12\n\tsub.s!\t@CPI0_5[0], r12, r6\n\tjump.gt\t@.BB0_2\n\tadd\tr5, r12, r5\n\tadd\t36, r5, r5\n\tsub!\tr5, r3, r5\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t196, r1, r5\n\tld\tr5, r5\n\tsub.s!\t@CPI0_5[0], r5, r6\n\tjump.gt\t@.BB0_2\n\tadd\t35, r5, r6\n\tadd\t@CPI0_6[0], r0, r7\n\tsub!\tr6, r3, r8\n\tadd\tr0, r0, r8\n\tadd.ge\tr7, r0, r8\n\tand\t@CPI0_6[0], r6, r6\n\tsub!\tr6, r0, r9\n\tadd.ge\tr0, r0, r7\n\tsub.s!\t@CPI0_6[0], r6, r6\n\tadd.ne\tr8, r0, r7\n\tsub!\tr7, r0, r6\n\tjump.ne\t@.BB0_2\n\tadd\t4, r5, r6\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tadd\tr6, r0, stack-[7]\n\tsub.s!\t@CPI0_5[0], r6, r6\n\tjump.gt\t@.BB0_2\n\tadd\t36, r5, r6\n\tadd\tr6, r0, stack-[6]\n\tadd\tstack-[7], r6, r5\n\tsub!\tr5, r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\tr12, r0, stack-[5]\n\tadd\tr11, r0, stack-[2]\n\tadd\tr10, r0, stack-[3]\n\tadd\t32, r4, r3\n\tptr.add\tr1, r3, r1\n\tand\t31, r2, r3\n\tshr.s!\t5, r2, r4\n\tjump.eq\t@.BB0_61\n\tadd\tr0, r0, r5\n.BB0_28:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tadd\t160, r6, r6\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_28\n.BB0_61:\n\tsub!\tr3, r0, r5\n\tjump.eq\t@.BB0_30\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tshl.s\t3, r3, r3\n\tadd\t160, r4, r4\n\tld.1\tr4, r5\n\tshl\tr5, r3, r5\n\tshr\tr5, r3, r5\n\tld\tr1, r1\n\tsub\t256, r3, r3\n\tshr\tr1, r3, r1\n\tshl\tr1, r3, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_30:\n\tadd\t160, r2, r1\n\tst.1\tr1, r0\n\tst.1\t128, r2\n\tadd\t191, r2, r1\n\tsub.s\t32, r0, stack-[4]\n\tand\tstack-[4], r1, r1\n\tsub.s!\t@CPI0_7[0], r1, r3\n\tjump.lt\t@.BB0_32\n.BB0_31:\n\tadd\t@CPI0_11[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_12[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_32:\n\tst.1\t64, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t96, r2, r1\n\tshl.s\t192, r3, r2\n\tor\tr1, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[5], r0, r5\n\tjump.eq\t@.BB0_2\n\tand\t31, r5, r4\n\tld.1\t64, r2\n\tadd\t32, r2, r3\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[1]\n\tadd\tstack-[8], r0, r1\n\tadd\t32, r1, r1\n\tptr.add\tstack[@ptr_calldata], r1, r1\n\tshr.s!\t5, r5, r5\n\tjump.eq\t@.BB0_60\n\tadd\tr0, r0, r6\n.BB0_35:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_35\n.BB0_60:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_37\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr3, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_37:\n\tadd\tstack-[5], r0, r4\n\tadd\tr3, r4, r1\n\tst.1\tr1, r0\n\tst.1\tr2, r4\n\tadd\t63, r4, r1\n\tand\tstack-[4], r1, r1\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI0_5[0], r1, r5\n\tjump.gt\t@.BB0_31\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_31\n\tst.1\t64, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t64, r3, r3\n\tld.1\tr2, r2\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r3, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t192, r3, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsub!\tstack-[1], r1, r1\n\tadd\tr0, r0, r1\n\tjump.ne\t@.BB0_57\n\tadd\tstack-[3], r0, r5\n\tand\t31, r5, r3\n\tadd\tstack-[2], r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r4\n\tld.1\t64, r1\n\tadd\t32, r1, r2\n\tshr.s!\t5, r5, r5\n\tjump.eq\t@.BB0_59\n\tadd\tr0, r0, r6\n.BB0_43:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr4, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_43\n.BB0_59:\n\tsub!\tr3, r0, r6\n\tjump.eq\t@.BB0_45\n\tshl.s\t5, r5, r5\n\tptr.add\tr4, r5, r4\n\tadd\tr2, r5, r5\n\tshl.s\t3, r3, r3\n\tld.1\tr5, r6\n\tshl\tr6, r3, r6\n\tshr\tr6, r3, r6\n\tld\tr4, r4\n\tsub\t256, r3, r3\n\tshr\tr4, r3, r4\n\tshl\tr4, r3, r3\n\tor\tr3, r6, r3\n\tst.1\tr5, r3\n.BB0_45:\n\tadd\tstack-[3], r0, r4\n\tadd\tr2, r4, r3\n\tst.1\tr3, r0\n\tst.1\tr1, r4\n\tadd\t63, r4, r3\n\tand\tstack-[4], r3, r3\n\tadd\tr1, r3, r3\n\tsub!\tr3, r1, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI0_5[0], r3, r5\n\tjump.gt\t@.BB0_31\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_31\n\tst.1\t64, r3\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t64, r2, r2\n\tld.1\tr1, r1\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[7], r0, r6\n\tand\t31, r6, r4\n\tadd\tstack-[6], r0, r2\n\tptr.add\tstack[@ptr_calldata], r2, r5\n\tld.1\t64, r2\n\tadd\t32, r2, r3\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[8]\n\tshr.s!\t5, r6, r1\n\tjump.eq\t@.BB0_58\n\tadd\tr0, r0, r6\n.BB0_50:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr5, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r1, r7\n\tjump.lt\t@.BB0_50\n.BB0_58:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_52\n\tshl.s\t5, r1, r1\n\tptr.add\tr5, r1, r5\n\tadd\tr3, r1, r1\n\tshl.s\t3, r4, r4\n\tld.1\tr1, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr5, r5\n\tsub\t256, r4, r4\n\tshr\tr5, r4, r5\n\tshl\tr5, r4, r4\n\tor\tr4, r6, r4\n\tst.1\tr1, r4\n.BB0_52:\n\tadd\tstack-[7], r0, r4\n\tadd\tr3, r4, r1\n\tst.1\tr1, r0\n\tst.1\tr2, r4\n\tadd\t63, r4, r1\n\tand\tstack-[4], r1, r1\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI0_5[0], r1, r5\n\tjump.gt\t@.BB0_31\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_31\n\tst.1\t64, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t64, r3, r3\n\tld.1\tr2, r2\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r3, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t192, r3, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsub!\tstack-[8], r1, r1\n\tadd\tr0, r0, r1\n\tjump.ne\t@.BB0_57\n\tptr.add\tstack[@ptr_calldata], r0, r1\n\tptr.add.s\t228, r1, r2\n\tld\tr2, r2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub!\tr1, r2, r1\n\tadd\t0, r0, r1\n\tadd.eq\t1, r0, r1\n.BB0_57:\n\tand\t1, r1, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_10[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\n__staticcall:\n.func_begin1:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB1_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB1_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end1:\n\n\t.data\n\t.p2align\t5\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell -26959946667150639794667015087019630673637144422540572481103610249216\nCPI0_3:\n\t.cell -38767959492720585390898867886731866391530064264941859364922807610740685406208\nCPI0_4:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_5:\n\t.cell 18446744073709551615\nCPI0_6:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI0_7:\n\t.cell 18446744073709551616\nCPI0_8:\n\t.cell 904625697166532776746648320380374280103671755200316909509741426855349583872\nCPI0_9:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI0_10:\n\t.cell 2535301200456458802993406410752\nCPI0_11:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_12:\n\t.cell 2852213850513516153367582212096\n",
          "bytecode": {
            "object": "0001000000000002000800000000000200000000000103550000008003000039000000400030043f000000000301001900000060033002700000006e033001970000000102200190000000b20000c13d000000040230008c000001ad0000413d000000000201043b0000007002200197000000710220009c000001ad0000c13d0000000002000416000000000202004b000001ad0000c13d000000040230008a000001000220008c000001ad0000413d0000002402100370000000000202043b000000720220009c000001ad0000213d0000004402100370000000000202043b000000720220009c000001ad0000213d0000006402100370000000000502043b000000730250009c000001ad0000213d00000023025000390000007404000041000000000632004b000000000600001900000000060480190000007402200197000000000702004b0000000004008019000000740220009c000000000406c019000000000204004b000001ad0000c13d0000000404500039000000000241034f000000000202043b000000730620009c000001ad0000213d00000000052500190000002405500039000000000535004b000001ad0000213d0000008405100370000000000505043b000000730650009c000001ad0000213d00000023065000390000007407000041000000000836004b000000000800001900000000080780190000007406600197000000000906004b0000000007008019000000740660009c000000000708c019000000000607004b000001ad0000c13d0000000406500039000000000661034f000000000a06043b0000007306a0009c000001ad0000213d000000240b5000390000000005ba0019000000000535004b000001ad0000213d000000a405100370000000000505043b000000730650009c000001ad0000213d00000023065000390000007407000041000000000836004b000000000800001900000000080780190000007406600197000000000906004b0000000007008019000000740660009c000000000708c019000000000607004b000001ad0000c13d000800040050003d0000000806100360000000000c06043b0000007306c0009c000001ad0000213d0000000005c500190000002405500039000000000535004b000001ad0000213d000000c405100370000000000505043b000000730650009c000001ad0000213d00000023065000390000007407000041000000000836004b000000000800001900000000080780190000007406600197000000000906004b0000000007008019000000740660009c000000000708c019000000000607004b000001ad0000c13d0000000406500039000000000661034f000000000606043b000700000006001d000000730660009c000001ad0000213d0000002406500039000600000006001d0000000705600029000000000335004b000001ad0000213d00050000000c001d00020000000b001d00030000000a001d0000002003400039000000000131034f0000001f0320018f0000000504200272000000950000613d00000000050000190000000506500210000000000761034f000000000707043b000000a00660003900000000007604350000000105500039000000000645004b0000008d0000413d000000000503004b000000a40000613d0000000504400210000000000141034f0000000303300210000000a004400039000000000504043300000000053501cf000000000535022f000000000101043b0000010003300089000000000131022f00000000013101cf000000000151019f0000000000140435000000a0012000390000000000010435000000800020043f000000bf012000390004002000000092000000040110017f000000750310009c000000ba0000413d000000790100004100000000001004350000004101000039000000040010043f0000007a01000041000001b6000104300000000001000416000000000101004b000001ad0000c13d0000002001000039000001000010044300000120000004430000006f01000041000001b50001042e000000400010043f0000006e0100004100000000030004140000006e0430009c00000000030180190000006e0420009c00000000020180190000006001200210000000c002300210000000000121019f00000076011001c7000080100200003901b401af0000040f00000001022001900000000505000029000001ad0000613d0000001f0450018f000000400200043d0000002003200039000000000101043b000100000001001d0000000801000029000000200110003900000000011003670000000505500272000000dd0000613d000000000600001900000005076002100000000008730019000000000771034f000000000707043b00000000007804350000000106600039000000000756004b000000d50000413d000000000604004b000000ec0000613d0000000505500210000000000151034f00000000055300190000000304400210000000000605043300000000064601cf000000000646022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000161019f000000000015043500000005040000290000000001430019000000000001043500000000004204350000003f01400039000000040110017f0000000001120019000000000421004b00000000040000190000000104004039000000730510009c000000ac0000213d0000000104400190000000ac0000c13d000000400010043f0000006e010000410000006e0430009c0000000003018019000000400330021000000000020204330000006e0420009c00000000020180190000006002200210000000000232019f00000000030004140000006e0430009c0000000003018019000000c001300210000000000121019f00000077011001c7000080100200003901b401af0000040f0000000102200190000001ad0000613d000000000101043b000000010110006b0000000001000019000001a40000c13d00000003050000290000001f0350018f00000002010000290000000004100367000000400100043d00000020021000390000000505500272000001230000613d000000000600001900000005076002100000000008720019000000000774034f000000000707043b00000000007804350000000106600039000000000756004b0000011b0000413d000000000603004b000001320000613d0000000505500210000000000454034f00000000055200190000000303300210000000000605043300000000063601cf000000000636022f000000000404043b0000010003300089000000000434022f00000000033401cf000000000363019f000000000035043500000003040000290000000003420019000000000003043500000000004104350000003f03400039000000040330017f0000000003310019000000000413004b00000000040000190000000104004039000000730530009c000000ac0000213d0000000104400190000000ac0000c13d000000400030043f0000006e030000410000006e0420009c0000000002038019000000400220021000000000010104330000006e0410009c00000000010380190000006001100210000000000121019f00000000020004140000006e0420009c0000000002038019000000c002200210000000000112019f00000077011001c7000080100200003901b401af0000040f0000000102200190000001ad0000613d00000007060000290000001f0460018f00000006020000290000000005200367000000400200043d0000002003200039000000000101043b000800000001001d0000000501600272000001670000613d000000000600001900000005076002100000000008730019000000000775034f000000000707043b00000000007804350000000106600039000000000716004b0000015f0000413d000000000604004b000001760000613d0000000501100210000000000515034f00000000011300190000000304400210000000000601043300000000064601cf000000000646022f000000000505043b0000010004400089000000000545022f00000000044501cf000000000464019f000000000041043500000007040000290000000001430019000000000001043500000000004204350000003f01400039000000040110017f0000000001120019000000000421004b00000000040000190000000104004039000000730510009c000000ac0000213d0000000104400190000000ac0000c13d000000400010043f0000006e010000410000006e0430009c0000000003018019000000400330021000000000020204330000006e0420009c00000000020180190000006002200210000000000232019f00000000030004140000006e0430009c0000000003018019000000c001300210000000000121019f00000077011001c7000080100200003901b401af0000040f0000000102200190000001ad0000613d000000000101043b000000080110006b0000000001000019000001a40000c13d0000000001000367000000e402100370000000000202043b0000000401100370000000000101043b000000000121004b00000000010000190000000101006039000000010110018f000000400200043d00000000001204350000006e010000410000006e0320009c0000000002018019000000400120021000000078011001c7000001b50001042e0000000001000019000001b600010430000001b2002104230000000102000039000000000001042d0000000002000019000000000001042d000001b400000432000001b50001042e000001b600010430000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000000200000000000000000000000000000040000001000000000000000000ffffffff00000000000000000000000000000000000000000000000000000000aa4a1cce00000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000ffffffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000200000000000000000000000000000000000000000000a00000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000004e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a3bf65adfbc14856340153004ceacfab5f8c93e2687a5a3a68057856c7ce47d8"
          },
          "methodIdentifiers": {
            "verifyPayPalTransaction(uint256,address,address,string,string,string,string,uint256)": "aa4a1cce"
          }
        },
        "irOptimized": "/// @use-src 0:\"src/OnRamper.sol\"\nobject \"OnRamper_62\" {\n    code {\n        {\n            /// @src 0:57:994  \"contract OnRamper {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"OnRamper_62_deployed\")\n            codecopy(_1, dataoffset(\"OnRamper_62_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"src/OnRamper.sol\"\n    object \"OnRamper_62_deployed\" {\n        code {\n            {\n                /// @src 0:57:994  \"contract OnRamper {...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                let _2 := 4\n                if iszero(lt(calldatasize(), _2))\n                {\n                    if eq(0xaa4a1cce, shr(224, calldataload(0)))\n                    {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 256) { revert(0, 0) }\n                        let value := calldataload(36)\n                        let _3 := sub(shl(160, 1), 1)\n                        if iszero(eq(value, and(value, _3))) { revert(0, 0) }\n                        let value_1 := calldataload(68)\n                        if iszero(eq(value_1, and(value_1, _3))) { revert(0, 0) }\n                        let offset := calldataload(100)\n                        let _4 := 0xffffffffffffffff\n                        if gt(offset, _4) { revert(0, 0) }\n                        let value3, value4 := abi_decode_string_calldata(add(_2, offset), calldatasize())\n                        let offset_1 := calldataload(132)\n                        if gt(offset_1, _4) { revert(0, 0) }\n                        let value5, value6 := abi_decode_string_calldata(add(_2, offset_1), calldatasize())\n                        let offset_2 := calldataload(164)\n                        if gt(offset_2, _4) { revert(0, 0) }\n                        let value7, value8 := abi_decode_string_calldata(add(_2, offset_2), calldatasize())\n                        let offset_3 := calldataload(196)\n                        if gt(offset_3, _4) { revert(0, 0) }\n                        let value9, value10 := abi_decode_string_calldata(add(_2, offset_3), calldatasize())\n                        let _5 := 32\n                        /// @src 0:682:714  \"abi.encodePacked(onRampersEmail)\"\n                        let _6 := add(_1, /** @src 0:57:994  \"contract OnRamper {...\" */ _5)\n                        calldatacopy(_6, value3, value4)\n                        let _7 := add(/** @src 0:682:714  \"abi.encodePacked(onRampersEmail)\" */ _1, /** @src 0:57:994  \"contract OnRamper {...\" */ value4)\n                        mstore(add(_7, _5), 0)\n                        /// @src 0:682:714  \"abi.encodePacked(onRampersEmail)\"\n                        let _8 := sub(/** @src 0:57:994  \"contract OnRamper {...\" */ _7, /** @src 0:682:714  \"abi.encodePacked(onRampersEmail)\" */ _1)\n                        mstore(_1, _8)\n                        finalize_allocation(_1, add(_8, /** @src 0:57:994  \"contract OnRamper {...\" */ _5))\n                        /// @src 0:672:715  \"keccak256(abi.encodePacked(onRampersEmail))\"\n                        let expr := keccak256(/** @src 0:57:994  \"contract OnRamper {...\" */ _6, mload(/** @src 0:672:715  \"keccak256(abi.encodePacked(onRampersEmail))\" */ _1))\n                        /// @src 0:741:781  \"abi.encodePacked(transactionSenderEmail)\"\n                        let expr_mpos := /** @src 0:57:994  \"contract OnRamper {...\" */ mload(64)\n                        /// @src 0:741:781  \"abi.encodePacked(transactionSenderEmail)\"\n                        let _9 := add(expr_mpos, /** @src 0:57:994  \"contract OnRamper {...\" */ _5)\n                        calldatacopy(_9, value7, value8)\n                        let _10 := add(/** @src 0:741:781  \"abi.encodePacked(transactionSenderEmail)\" */ expr_mpos, /** @src 0:57:994  \"contract OnRamper {...\" */ value8)\n                        mstore(add(_10, _5), 0)\n                        /// @src 0:741:781  \"abi.encodePacked(transactionSenderEmail)\"\n                        let _11 := sub(/** @src 0:57:994  \"contract OnRamper {...\" */ _10, /** @src 0:741:781  \"abi.encodePacked(transactionSenderEmail)\" */ expr_mpos)\n                        mstore(expr_mpos, _11)\n                        finalize_allocation(expr_mpos, add(_11, /** @src 0:57:994  \"contract OnRamper {...\" */ _5))\n                        /// @src 0:671:918  \"(keccak256(abi.encodePacked(onRampersEmail)) ==...\"\n                        let expr_1 := /** @src 0:672:782  \"keccak256(abi.encodePacked(onRampersEmail)) ==...\" */ eq(expr, /** @src 0:731:782  \"keccak256(abi.encodePacked(transactionSenderEmail))\" */ keccak256(/** @src 0:57:994  \"contract OnRamper {...\" */ _9, mload(/** @src 0:731:782  \"keccak256(abi.encodePacked(transactionSenderEmail))\" */ expr_mpos)))\n                        /// @src 0:671:918  \"(keccak256(abi.encodePacked(onRampersEmail)) ==...\"\n                        if expr_1\n                        {\n                            /// @src 0:810:843  \"abi.encodePacked(offRampersEmail)\"\n                            let expr_mpos_1 := /** @src 0:57:994  \"contract OnRamper {...\" */ mload(64)\n                            /// @src 0:810:843  \"abi.encodePacked(offRampersEmail)\"\n                            let _12 := add(expr_mpos_1, /** @src 0:57:994  \"contract OnRamper {...\" */ _5)\n                            calldatacopy(_12, value5, value6)\n                            let _13 := add(/** @src 0:810:843  \"abi.encodePacked(offRampersEmail)\" */ expr_mpos_1, /** @src 0:57:994  \"contract OnRamper {...\" */ value6)\n                            mstore(add(_13, _5), 0)\n                            /// @src 0:810:843  \"abi.encodePacked(offRampersEmail)\"\n                            let _14 := sub(/** @src 0:57:994  \"contract OnRamper {...\" */ _13, /** @src 0:810:843  \"abi.encodePacked(offRampersEmail)\" */ expr_mpos_1)\n                            mstore(expr_mpos_1, _14)\n                            finalize_allocation(expr_mpos_1, add(_14, /** @src 0:57:994  \"contract OnRamper {...\" */ _5))\n                            /// @src 0:800:844  \"keccak256(abi.encodePacked(offRampersEmail))\"\n                            let expr_2 := keccak256(/** @src 0:57:994  \"contract OnRamper {...\" */ _12, mload(/** @src 0:800:844  \"keccak256(abi.encodePacked(offRampersEmail))\" */ expr_mpos_1))\n                            /// @src 0:874:916  \"abi.encodePacked(transactionReceiverEmail)\"\n                            let expr_mpos_2 := /** @src 0:57:994  \"contract OnRamper {...\" */ mload(64)\n                            /// @src 0:874:916  \"abi.encodePacked(transactionReceiverEmail)\"\n                            let _15 := add(expr_mpos_2, /** @src 0:57:994  \"contract OnRamper {...\" */ _5)\n                            calldatacopy(_15, value9, value10)\n                            let _16 := add(/** @src 0:874:916  \"abi.encodePacked(transactionReceiverEmail)\" */ expr_mpos_2, /** @src 0:57:994  \"contract OnRamper {...\" */ value10)\n                            mstore(add(_16, _5), 0)\n                            /// @src 0:874:916  \"abi.encodePacked(transactionReceiverEmail)\"\n                            let _17 := sub(/** @src 0:57:994  \"contract OnRamper {...\" */ _16, /** @src 0:874:916  \"abi.encodePacked(transactionReceiverEmail)\" */ expr_mpos_2)\n                            mstore(expr_mpos_2, _17)\n                            finalize_allocation(expr_mpos_2, add(_17, /** @src 0:57:994  \"contract OnRamper {...\" */ _5))\n                            /// @src 0:671:918  \"(keccak256(abi.encodePacked(onRampersEmail)) ==...\"\n                            expr_1 := /** @src 0:800:917  \"keccak256(abi.encodePacked(offRampersEmail)) ==...\" */ eq(expr_2, /** @src 0:864:917  \"keccak256(abi.encodePacked(transactionReceiverEmail))\" */ keccak256(/** @src 0:57:994  \"contract OnRamper {...\" */ _15, mload(/** @src 0:864:917  \"keccak256(abi.encodePacked(transactionReceiverEmail))\" */ expr_mpos_2)))\n                        }\n                        /// @src 0:671:961  \"(keccak256(abi.encodePacked(onRampersEmail)) ==...\"\n                        let expr_3 := expr_1\n                        if expr_1\n                        {\n                            expr_3 := /** @src 0:934:961  \"amount == transactionAmount\" */ eq(/** @src 0:57:994  \"contract OnRamper {...\" */ calldataload(_2), calldataload(228))\n                        }\n                        let memPos := mload(64)\n                        mstore(memPos, iszero(iszero(expr_3)))\n                        return(memPos, _5)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_decode_string_calldata(offset, end) -> arrayPos, length\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                length := calldataload(offset)\n                if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                arrayPos := add(offset, 0x20)\n                if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220af8d3ada7a14966706cf1c4bd74e07c84ce4122d62bce5f1fdc419bc45f11bed64736f6c63430008180033\"\n    }\n}\n",
        "hash": "0100007d6b7310ee5e291ca225798f0fed6a40ea670c7b9dd2387a091d8e5227",
        "factoryDependencies": {}
      }
    }
  },
  "sources": {
    "src/OnRamper.sol": {
      "id": 0,
      "ast": {
        "absolutePath": "src/OnRamper.sol",
        "exportedSymbols": {
          "OnRamper": [
            62
          ]
        },
        "id": 63,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 1,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".0"
            ],
            "nodeType": "PragmaDirective",
            "src": "32:23:0"
          },
          {
            "abstract": false,
            "baseContracts": [],
            "canonicalName": "OnRamper",
            "contractDependencies": [],
            "contractKind": "contract",
            "fullyImplemented": true,
            "id": 62,
            "linearizedBaseContracts": [
              62
            ],
            "name": "OnRamper",
            "nameLocation": "66:8:0",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": {
                  "id": 60,
                  "nodeType": "Block",
                  "src": "581:411:0",
                  "statements": [
                    {
                      "assignments": [
                        23
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 23,
                          "mutability": "mutable",
                          "name": "success",
                          "nameLocation": "661:7:0",
                          "nodeType": "VariableDeclaration",
                          "scope": 60,
                          "src": "656:12:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 22,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "656:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 57,
                      "initialValue": {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 56,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 52,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                "id": 36,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 27,
                                          "name": "onRampersEmail",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 9,
                                          "src": "699:14:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_string_calldata_ptr",
                                            "typeString": "string calldata"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_string_calldata_ptr",
                                            "typeString": "string calldata"
                                          }
                                        ],
                                        "expression": {
                                          "id": 25,
                                          "name": "abi",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -1,
                                          "src": "682:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_abi",
                                            "typeString": "abi"
                                          }
                                        },
                                        "id": 26,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "memberLocation": "686:12:0",
                                        "memberName": "encodePacked",
                                        "nodeType": "MemberAccess",
                                        "src": "682:16:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                          "typeString": "function () pure returns (bytes memory)"
                                        }
                                      },
                                      "id": 28,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "682:32:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    ],
                                    "id": 24,
                                    "name": "keccak256",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -8,
                                    "src": "672:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                      "typeString": "function (bytes memory) pure returns (bytes32)"
                                    }
                                  },
                                  "id": 29,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "672:43:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 33,
                                          "name": "transactionSenderEmail",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 13,
                                          "src": "758:22:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_string_calldata_ptr",
                                            "typeString": "string calldata"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_string_calldata_ptr",
                                            "typeString": "string calldata"
                                          }
                                        ],
                                        "expression": {
                                          "id": 31,
                                          "name": "abi",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -1,
                                          "src": "741:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_abi",
                                            "typeString": "abi"
                                          }
                                        },
                                        "id": 32,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "memberLocation": "745:12:0",
                                        "memberName": "encodePacked",
                                        "nodeType": "MemberAccess",
                                        "src": "741:16:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                          "typeString": "function () pure returns (bytes memory)"
                                        }
                                      },
                                      "id": 34,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "741:40:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    ],
                                    "id": 30,
                                    "name": "keccak256",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -8,
                                    "src": "731:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                      "typeString": "function (bytes memory) pure returns (bytes32)"
                                    }
                                  },
                                  "id": 35,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "731:51:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "src": "672:110:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              }
                            ],
                            "id": 37,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "671:112:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                "id": 50,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 41,
                                          "name": "offRampersEmail",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 11,
                                          "src": "827:15:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_string_calldata_ptr",
                                            "typeString": "string calldata"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_string_calldata_ptr",
                                            "typeString": "string calldata"
                                          }
                                        ],
                                        "expression": {
                                          "id": 39,
                                          "name": "abi",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -1,
                                          "src": "810:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_abi",
                                            "typeString": "abi"
                                          }
                                        },
                                        "id": 40,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "memberLocation": "814:12:0",
                                        "memberName": "encodePacked",
                                        "nodeType": "MemberAccess",
                                        "src": "810:16:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                          "typeString": "function () pure returns (bytes memory)"
                                        }
                                      },
                                      "id": 42,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "810:33:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    ],
                                    "id": 38,
                                    "name": "keccak256",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -8,
                                    "src": "800:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                      "typeString": "function (bytes memory) pure returns (bytes32)"
                                    }
                                  },
                                  "id": 43,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "800:44:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 47,
                                          "name": "transactionReceiverEmail",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 15,
                                          "src": "891:24:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_string_calldata_ptr",
                                            "typeString": "string calldata"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_string_calldata_ptr",
                                            "typeString": "string calldata"
                                          }
                                        ],
                                        "expression": {
                                          "id": 45,
                                          "name": "abi",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -1,
                                          "src": "874:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_abi",
                                            "typeString": "abi"
                                          }
                                        },
                                        "id": 46,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "memberLocation": "878:12:0",
                                        "memberName": "encodePacked",
                                        "nodeType": "MemberAccess",
                                        "src": "874:16:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                          "typeString": "function () pure returns (bytes memory)"
                                        }
                                      },
                                      "id": 48,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "874:42:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    ],
                                    "id": 44,
                                    "name": "keccak256",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -8,
                                    "src": "864:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                      "typeString": "function (bytes memory) pure returns (bytes32)"
                                    }
                                  },
                                  "id": 49,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "864:53:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "src": "800:117:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              }
                            ],
                            "id": 51,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "799:119:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "671:247:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 55,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 53,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3,
                            "src": "934:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 54,
                            "name": "transactionAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 17,
                            "src": "944:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "934:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "671:290:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "656:305:0"
                    },
                    {
                      "expression": {
                        "id": 58,
                        "name": "success",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23,
                        "src": "978:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 21,
                      "id": 59,
                      "nodeType": "Return",
                      "src": "971:14:0"
                    }
                  ]
                },
                "functionSelector": "aa4a1cce",
                "id": 61,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "verifyPayPalTransaction",
                "nameLocation": "236:23:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 18,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 3,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "277:6:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 61,
                      "src": "269:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "269:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 5,
                      "mutability": "mutable",
                      "name": "onRamper",
                      "nameLocation": "301:8:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 61,
                      "src": "293:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 4,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "293:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 7,
                      "mutability": "mutable",
                      "name": "offRamper",
                      "nameLocation": "327:9:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 61,
                      "src": "319:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 6,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "319:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 9,
                      "mutability": "mutable",
                      "name": "onRampersEmail",
                      "nameLocation": "362:14:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 61,
                      "src": "346:30:0",
                      "stateVariable": false,
                      "storageLocation": "calldata",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_calldata_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 8,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "346:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 11,
                      "mutability": "mutable",
                      "name": "offRampersEmail",
                      "nameLocation": "402:15:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 61,
                      "src": "386:31:0",
                      "stateVariable": false,
                      "storageLocation": "calldata",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_calldata_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 10,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "386:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 13,
                      "mutability": "mutable",
                      "name": "transactionSenderEmail",
                      "nameLocation": "443:22:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 61,
                      "src": "427:38:0",
                      "stateVariable": false,
                      "storageLocation": "calldata",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_calldata_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 12,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "427:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 15,
                      "mutability": "mutable",
                      "name": "transactionReceiverEmail",
                      "nameLocation": "491:24:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 61,
                      "src": "475:40:0",
                      "stateVariable": false,
                      "storageLocation": "calldata",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_calldata_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 14,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "475:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 17,
                      "mutability": "mutable",
                      "name": "transactionAmount",
                      "nameLocation": "533:17:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 61,
                      "src": "525:25:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 16,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "525:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "259:297:0"
                },
                "returnParameters": {
                  "id": 21,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 20,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 61,
                      "src": "575:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 19,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "575:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "574:6:0"
                },
                "scope": 62,
                "src": "227:765:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              }
            ],
            "scope": 63,
            "src": "57:937:0",
            "usedErrors": [],
            "usedEvents": []
          }
        ],
        "src": "32:963:0"
      }
    }
  },
  "errors": [
    {
      "component": "general",
      "errorCode": "5667",
      "formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> src/OnRamper.sol:10:9:\n   |\n10 |         address onRamper,\n   |         ^^^^^^^^^^^^^^^^\n\n",
      "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
      "severity": "warning",
      "sourceLocation": {
        "file": "src/OnRamper.sol",
        "start": 293,
        "end": 309
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "errorCode": "5667",
      "formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> src/OnRamper.sol:11:9:\n   |\n11 |         address offRamper,\n   |         ^^^^^^^^^^^^^^^^^\n\n",
      "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
      "severity": "warning",
      "sourceLocation": {
        "file": "src/OnRamper.sol",
        "start": 319,
        "end": 336
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "errorCode": "2018",
      "formattedMessage": "Warning: Function state mutability can be restricted to pure\n --> src/OnRamper.sol:8:5:\n  |\n8 |     function verifyPayPalTransaction(\n  |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
      "message": "Function state mutability can be restricted to pure",
      "severity": "warning",
      "sourceLocation": {
        "file": "src/OnRamper.sol",
        "start": 227,
        "end": 992
      },
      "type": "Warning"
    }
  ],
  "version": "0.8.24",
  "long_version": "0.8.24+commit.e11b9ed9.Darwin.appleclang",
  "zk_version": "1.4.0"
}