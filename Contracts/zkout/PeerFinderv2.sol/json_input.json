{
  "language": "Solidity",
  "sources": {
    "src/PeerFinderv2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract PeerFinderv2 {\n    struct OffRampIntent {\n        uint amount;\n        uint timestamp;\n        address addr;\n        bytes32 entryHash; \n    }\n\n    mapping(uint => OffRampIntent) public offRampIntents;\n    uint[] private timestamps;\n\n    // Function to add an OffRampIntent\n    function addOffRampIntent(uint _amount, address _addr) public {\n        uint currentTimestamp = block.timestamp;\n        bytes32 hash = keccak256(abi.encodePacked(_amount, currentTimestamp, _addr));\n        offRampIntents[currentTimestamp] = OffRampIntent(_amount, currentTimestamp, _addr, hash);\n        timestamps.push(currentTimestamp);\n    }\n\n    function deleteOffRampIntent(bytes32 hash) public {\n        uint index = timestamps.length; // Initialize with an invalid index\n        for (uint i = 0; i < timestamps.length; i++) {\n            if (offRampIntents[timestamps[i]].entryHash == hash) {\n                index = i;\n                break;\n            }\n        }\n\n        require(index < timestamps.length, \"Hash not found\");\n\n        // Delete the entry from the mapping\n        delete offRampIntents[timestamps[index]];\n\n        // Remove the index from the timestamps array by shifting\n        for (uint i = index; i < timestamps.length - 1; i++) {\n            timestamps[i] = timestamps[i + 1];\n        }\n        timestamps.pop(); // Remove the last element\n    }\n\n\n    function getNewestEntry(bytes32[] memory intentsAlreadyUsed) public view returns (OffRampIntent memory) {\n        require(timestamps.length > 0, \"No entries found.\");\n        uint latestTimestamp = timestamps[0];\n\n        // Initialize as the earliest timestamp\n        for (uint i = 1; i < timestamps.length; i++) {\n            if (!isHashUsed(offRampIntents[timestamps[i]].entryHash, intentsAlreadyUsed) && timestamps[i] > latestTimestamp) {\n                latestTimestamp = timestamps[i];\n            }\n        }\n\n        return offRampIntents[latestTimestamp];\n    }\n\n    // Helper function to check if hash is used\n    function isHashUsed(bytes32 hash, bytes32[] memory usedHashes) private pure returns (bool) {\n        for (uint i = 0; i < usedHashes.length; i++) {\n            if (usedHashes[i] == hash) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/"
    ],
    "optimizer": {
      "enabled": true,
      "mode": "3",
      "details": null,
      "fallbackToOptimizingForSize": false,
      "disableSystemRequestMemoization": true
    },
    "outputSelection": {
      "*": {
        "": [
          "metadata"
        ],
        "*": [
          "abi",
          "evm.methodIdentifiers"
        ]
      }
    },
    "libraries": {},
    "isSystem": false,
    "forceEvmla": false,
    "areLibrariesMissing": false
  }
}