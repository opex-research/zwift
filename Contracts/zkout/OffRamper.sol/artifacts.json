{
  "contracts": {
    "src/OffRamper.sol": {
      "OffRamper": {
        "abi": [
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "user",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "EscrowRefunded",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "offRamperAddress",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "onRamperAddress",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "releaseAmount",
                "type": "uint256"
              }
            ],
            "name": "FundsReleased",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "user",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "OffRampIntentCreated",
            "type": "event"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "user",
                "type": "address"
              }
            ],
            "name": "getEscrowBalance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "offRamperAddress",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "newOffRampIntent",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "user",
                "type": "address"
              }
            ],
            "name": "refundEscrowBalance",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "offRamperAddress",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "onRamperAddress",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "releaseAmount",
                "type": "uint256"
              }
            ],
            "name": "releasePartialFundsToOnRamper",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": {
          "optimizer_settings": {
            "is_debug_logging_enabled": false,
            "is_fallback_to_size_enabled": false,
            "is_system_request_memoization_disabled": true,
            "is_verify_each_enabled": false,
            "level_back_end": "Aggressive",
            "level_middle_end": "Aggressive",
            "level_middle_end_size": "Zero"
          },
          "solc_metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscrowRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offRamperAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onRamperAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"}],\"name\":\"FundsReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OffRampIntentCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getEscrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"offRamperAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"newOffRampIntent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"refundEscrowBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"offRamperAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onRamperAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"}],\"name\":\"releasePartialFundsToOnRamper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/OffRamper.sol\":\"OffRamper\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/OffRamper.sol\":{\"keccak256\":\"0x4ae43dbc63aca2aa624578454b521e418ff2c6343a463fe2c7eaab9bd96a3af1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a4cb1a74ec4e1c874bb7ab5da974829031932a86e1da3df8686524205bb0af00\",\"dweb:/ipfs/QmSvwzJgt49BzHDVmj1RmBDQ5KPJQ7x2ehpj6UpPCHY5w7\"]}},\"version\":1}",
          "solc_version": "0.8.24",
          "solc_zkvm_edition": null,
          "zk_version": "1.4.0"
        },
        "evm": {
          "legacyAssembly": null,
          "assembly": "\t.text\n\t.file\t\"OffRamper.sol:OffRamper\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[3]\n\tadd\t128, r0, r3\n\tst.1\t64, r3\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r4\n\tjump.gt\t@.BB0_8\n\tsub.s!\t@CPI0_5[0], r2, r4\n\tjump.eq\t@.BB0_10\n\tsub.s!\t@CPI0_6[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_7[0], r1, r2\n\tjump.gt\t@.BB0_2\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_19[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_8:\n\tsub.s!\t@CPI0_3[0], r2, r4\n\tjump.eq\t@.BB0_38\n\tsub.s!\t@CPI0_4[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r4\n\tsub.s!\t@CPI0_7[0], r4, r1\n\tjump.gt\t@.BB0_2\n\tst.1\t0, r4\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr4, r0, stack-[3]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r2\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_51\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_12[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t18, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_13[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_14[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_10:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t96, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_7[0], r4, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r2\n\tand\t@CPI0_7[0], r2, stack-[2]\n\tsub.s!\t@CPI0_7[0], r2, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t68, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[1]\n\tst.1\t0, r4\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr4, r0, stack-[3]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r1\n\tsub.s!\tstack-[1], r1, r1\n\tjump.ge\t@.BB0_18\n\tadd\t@CPI0_13[0], r0, r1\n\tst.1\t128, r1\n\tadd\t32, r0, r1\n\tst.1\t132, r1\n\tadd\t37, r0, r1\n\tst.1\t164, r1\n\tadd\t@CPI0_24[0], r0, r1\n\tst.1\t196, r1\n\tadd\t@CPI0_25[0], r0, r1\n\tjump\t@.BB0_17\n.BB0_38:\n\tsub.s\t4, r3, r2\n\tsub.s!\t64, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_7[0], r4, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r1\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_41\n\tadd\tr2, r0, stack-[2]\n\tst.1\t0, r4\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr4, r0, stack-[3]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r5\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r3\n\tadd\tstack-[2], r0, r4\n\tadd\tr3, r4, r2\n\tsub!\tr2, r3, r3\n\tadd\t0, r0, r3\n\tadd.lt\t1, r0, r3\n\tand!\t1, r3, r3\n\tjump.eq\t@.BB0_44\n.BB0_20:\n\tadd\t@CPI0_22[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_23[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_41:\n\tadd\t@CPI0_13[0], r0, r1\n\tst.1\t128, r1\n\tadd\t32, r0, r1\n\tst.1\t132, r1\n\tadd\t46, r0, r1\n\tst.1\t164, r1\n\tadd\t@CPI0_15[0], r0, r1\n\tst.1\t196, r1\n\tadd\t@CPI0_16[0], r0, r1\n.BB0_17:\n\tst.1\t228, r1\n\tadd\t@CPI0_17[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_51:\n\tadd\tr2, r0, stack-[2]\n\tst.1\t0, r3\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r5\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsstore\tr1, r0\n\tsub.s!\t4, r5, r1\n\tjump.eq\t@.BB0_59\n\tadd\t32777, r0, r2\n\tadd\t@CPI0_9[0], r0, r1\n\tadd\tstack-[2], r0, r3\n\tadd\tr5, r0, r4\n\tadd\tr0, r0, r5\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r5\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_54\n.BB0_59:\n\tld.1\t64, r1\n\tadd\tstack-[2], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_10[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t2, r0, r3\n\tadd\t@CPI0_11[0], r0, r4\n\tjump\t@.BB0_32\n.BB0_44:\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r4\n\tadd\t@CPI0_0[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_10[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t2, r0, r3\n\tadd\t@CPI0_18[0], r0, r4\n.BB0_32:\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_18:\n\tst.1\t0, r3\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r5\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r2\n\tsub.s!\tstack-[1], r2, r3\n\tadd\tstack-[1], r0, r3\n\tjump.lt\t@.BB0_20\n\tsub\tr2, r3, r2\n\tsstore\tr1, r2\n\tadd\tstack-[2], r0, r1\n\tsub.s!\t4, r1, r1\n\tjump.eq\t@.BB0_31\n\tadd\t@CPI0_20[0], r0, r1\n\tsub!\tr3, r0, r2\n\tadd.ne\tr0, r0, r1\n\tjump.ne\t@.BB0_25\n\tadd\tstack-[2], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tjump\t@.BB0_23\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_54:\n\tld.1\t64, r2\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t31, r3, r4\n\tand\t@CPI0_0[0], r3, r3\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_61\n\tadd\tr0, r0, r6\n.BB0_56:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_56\n.BB0_61:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_58\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_58:\n.BB0_30:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_25:\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32777, r0, r2\n\tadd\tstack-[2], r0, r4\n\tadd\tr0, r0, r5\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n.BB0_23:\n\tand!\t1, r2, r2\n\tadd\tstack-[3], r0, r5\n\tadd\tstack-[1], r0, r3\n\tjump.eq\t@.BB0_26\n.BB0_31:\n\tld.1\t64, r1\n\tst.1\tr1, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_10[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_21[0], r0, r4\n\tadd\tstack-[2], r0, r6\n\tjump\t@.BB0_32\n.BB0_26:\n\tld.1\t64, r2\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t31, r3, r4\n\tand\t@CPI0_0[0], r3, r3\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_60\n\tadd\tr0, r0, r6\n.BB0_28:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_28\n.BB0_60:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_30\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n\tjump\t@.BB0_30\n.func_end0:\n\n__sha3:\n.func_begin1:\n\tadd\t@CPI1_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI1_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI1_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB1_2\n\tld\tr1, r1\n\tret\n.BB1_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\n__farcall:\n.func_begin2:\n.tmp0:\n\tfar_call\tr1, r2, @.BB2_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB2_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end2:\n\n__staticcall:\n.func_begin3:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB3_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB3_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end3:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI1_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 3584476374\nCPI0_3:\n\t.cell 3584476375\nCPI0_4:\n\t.cell 4084652204\nCPI0_5:\n\t.cell 1578284584\nCPI0_6:\n\t.cell 1668591899\nCPI0_7:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_8:\nCPI1_1:\n\t.cell 904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI0_9:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI0_10:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_11:\n\t.cell -53689348795637019012605739916726865993561341928285997322872528259411263101987\nCPI0_12:\n\t.cell 35476745831849787218123926850997983376732336146671980157534043926719522406400\nCPI0_13:\n\t.cell 3963877391197344453575983046348115674221700746820753546331534351508065746944\nCPI0_14:\n\t.cell 7922816251426433759354395033600\nCPI0_15:\n\t.cell 37721180308824379675395256094284563496716411850826104537636094720040834724720\nCPI0_16:\n\t.cell 45859243010703438845228887731383474769482982604427012878883121858111707545600\nCPI0_17:\n\t.cell 10458117454244075803782624051200\nCPI0_18:\n\t.cell 19358344619000424289946655684960733428056474257043985424914409953961317473718\nCPI0_19:\n\t.cell 2535301202817642044428229017600\nCPI0_20:\n\t.cell 14437333991389365756822315673377632757035417522267279379660800\nCPI0_21:\n\t.cell -7772275502411469710305347013814186267703028754428028561389766482947299044357\nCPI0_22:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_23:\n\t.cell 2852213850513516153367582212096\nCPI0_24:\n\t.cell 37268853259193290478875828778926453224339854515668771345290549057481452053089\nCPI0_25:\n\t.cell 49021933684045681692742822509781339105427460695086689202577167798471177011200\n",
          "bytecode": {
            "object": ""
          },
          "methodIdentifiers": {
            "getEscrowBalance(address)": "6374b11b",
            "newOffRampIntent(address,uint256)": "d5a6c4d7",
            "refundEscrowBalance(address)": "f376d8ac",
            "releasePartialFundsToOnRamper(address,address,uint256)": "5e12b628"
          }
        },
        "irOptimized": "/// @use-src 0:\"src/OffRamper.sol\"\nobject \"OffRamper_142\" {\n    code {\n        {\n            /// @src 0:57:2051  \"contract OffRamper {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"OffRamper_142_deployed\")\n            codecopy(_1, dataoffset(\"OffRamper_142_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"src/OffRamper.sol\"\n    object \"OffRamper_142_deployed\" {\n        code {\n            {\n                /// @src 0:57:2051  \"contract OffRamper {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x5e12b628 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value0 := abi_decode_address()\n                        let value := calldataload(36)\n                        let _4 := sub(shl(160, 1), 1)\n                        let _5 := and(value, _4)\n                        if iszero(eq(value, _5)) { revert(0, 0) }\n                        let value_1 := calldataload(68)\n                        let _6 := and(value0, _4)\n                        mstore(0, _6)\n                        mstore(32, 0)\n                        if /** @src 0:1178:1227  \"escrowBalances[offRamperAddress] >= releaseAmount\" */ lt(/** @src 0:57:2051  \"contract OffRamper {...\" */ sload(keccak256(0, _2)), /** @src 0:1178:1227  \"escrowBalances[offRamperAddress] >= releaseAmount\" */ value_1)\n                        /// @src 0:57:2051  \"contract OffRamper {...\"\n                        {\n                            mstore(_1, shl(229, 4594637))\n                            mstore(add(_1, _3), 32)\n                            mstore(add(_1, 36), 37)\n                            mstore(add(_1, 68), \"Release amount exceeds escrow ba\")\n                            mstore(add(_1, 100), \"lance\")\n                            revert(_1, 132)\n                        }\n                        mstore(0, _6)\n                        mstore(32, 0)\n                        let dataSlot := keccak256(0, _2)\n                        let _7 := sload(/** @src 0:1301:1350  \"escrowBalances[offRamperAddress] -= releaseAmount\" */ dataSlot)\n                        /// @src 0:57:2051  \"contract OffRamper {...\"\n                        let diff := sub(_7, value_1)\n                        if gt(diff, _7)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_3, 0x11)\n                            revert(0, 36)\n                        }\n                        sstore(dataSlot, diff)\n                        /// @src 0:1360:1408  \"payable(onRamperAddress).transfer(releaseAmount)\"\n                        let _8 := /** @src 0:57:2051  \"contract OffRamper {...\" */ 0\n                        /// @src 0:1360:1408  \"payable(onRamperAddress).transfer(releaseAmount)\"\n                        if iszero(value_1) { _8 := 2300 }\n                        if iszero(call(_8, _5, value_1, /** @src 0:57:2051  \"contract OffRamper {...\" */ 0, 0, 0, 0))\n                        /// @src 0:1360:1408  \"payable(onRamperAddress).transfer(releaseAmount)\"\n                        {\n                            /// @src 0:57:2051  \"contract OffRamper {...\"\n                            let pos := mload(_2)\n                            returndatacopy(pos, 0, returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        /// @src 0:1423:1486  \"FundsReleased(offRamperAddress, onRamperAddress, releaseAmount)\"\n                        let _9 := /** @src 0:57:2051  \"contract OffRamper {...\" */ mload(_2)\n                        mstore(_9, value_1)\n                        /// @src 0:1423:1486  \"FundsReleased(offRamperAddress, onRamperAddress, releaseAmount)\"\n                        log3(_9, /** @src 0:57:2051  \"contract OffRamper {...\" */ 32, /** @src 0:1423:1486  \"FundsReleased(offRamperAddress, onRamperAddress, releaseAmount)\" */ 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb, _6, _5)\n                        /// @src 0:57:2051  \"contract OffRamper {...\"\n                        return(0, 0)\n                    }\n                    case 0x6374b11b {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, 0)\n                        let _10 := sload(keccak256(0, _2))\n                        let memPos := mload(_2)\n                        mstore(memPos, _10)\n                        return(memPos, 32)\n                    }\n                    case 0xd5a6c4d7 {\n                        if slt(add(calldatasize(), not(3)), _2) { revert(0, 0) }\n                        let value0_1 := abi_decode_address()\n                        let value_2 := calldataload(36)\n                        if iszero(/** @src 0:708:727  \"msg.value == amount\" */ eq(/** @src 0:708:717  \"msg.value\" */ callvalue(), /** @src 0:708:727  \"msg.value == amount\" */ value_2))\n                        /// @src 0:57:2051  \"contract OffRamper {...\"\n                        {\n                            let memPtr := mload(_2)\n                            mstore(memPtr, shl(229, 4594637))\n                            mstore(add(memPtr, _3), 32)\n                            mstore(add(memPtr, 36), 46)\n                            mstore(add(memPtr, 68), \"Sent value does not match the sp\")\n                            mstore(add(memPtr, 100), \"ecified amount\")\n                            revert(memPtr, 132)\n                        }\n                        let _11 := and(value0_1, sub(shl(160, 1), 1))\n                        mstore(0, _11)\n                        mstore(32, 0)\n                        let dataSlot_1 := keccak256(0, _2)\n                        let _12 := sload(/** @src 0:809:851  \"escrowBalances[offRamperAddress] += amount\" */ dataSlot_1)\n                        /// @src 0:57:2051  \"contract OffRamper {...\"\n                        let sum := add(_12, value_2)\n                        if gt(_12, sum)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_3, 0x11)\n                            revert(0, 36)\n                        }\n                        sstore(dataSlot_1, sum)\n                        /// @src 0:866:912  \"OffRampIntentCreated(offRamperAddress, amount)\"\n                        let _13 := /** @src 0:57:2051  \"contract OffRamper {...\" */ mload(_2)\n                        mstore(_13, value_2)\n                        /// @src 0:866:912  \"OffRampIntentCreated(offRamperAddress, amount)\"\n                        log2(_13, /** @src 0:57:2051  \"contract OffRamper {...\" */ 32, /** @src 0:866:912  \"OffRampIntentCreated(offRamperAddress, amount)\" */ 0x2acc6f4d477bb2469e2a36739daff7c473cb76338817ff2877973ed2bb9f9db6, _11)\n                        /// @src 0:57:2051  \"contract OffRamper {...\"\n                        return(0, 0)\n                    }\n                    case 0xf376d8ac {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let _14 := and(abi_decode_address(), sub(shl(160, 1), 1))\n                        mstore(0, _14)\n                        mstore(32, 0)\n                        let _15 := sload(keccak256(0, _2))\n                        if /** @src 0:1873:1889  \"refundAmount > 0\" */ iszero(_15)\n                        /// @src 0:57:2051  \"contract OffRamper {...\"\n                        {\n                            let memPtr_1 := mload(_2)\n                            mstore(memPtr_1, shl(229, 4594637))\n                            mstore(add(memPtr_1, _3), 32)\n                            mstore(add(memPtr_1, 36), 18)\n                            mstore(add(memPtr_1, 68), \"No funds to refund\")\n                            revert(memPtr_1, 100)\n                        }\n                        mstore(0, _14)\n                        mstore(32, 0)\n                        sstore(keccak256(0, _2), 0)\n                        /// @src 0:1957:1993  \"payable(user).transfer(refundAmount)\"\n                        if iszero(call(/** @src 0:57:2051  \"contract OffRamper {...\" */ 0, /** @src 0:1957:1993  \"payable(user).transfer(refundAmount)\" */ _14, _15, /** @src 0:57:2051  \"contract OffRamper {...\" */ 0, 0, 0, 0))\n                        /// @src 0:1957:1993  \"payable(user).transfer(refundAmount)\"\n                        {\n                            /// @src 0:57:2051  \"contract OffRamper {...\"\n                            let pos_1 := mload(_2)\n                            returndatacopy(pos_1, 0, returndatasize())\n                            revert(pos_1, returndatasize())\n                        }\n                        /// @src 0:2008:2042  \"EscrowRefunded(user, refundAmount)\"\n                        let _16 := /** @src 0:57:2051  \"contract OffRamper {...\" */ mload(_2)\n                        mstore(_16, _15)\n                        /// @src 0:2008:2042  \"EscrowRefunded(user, refundAmount)\"\n                        log2(_16, /** @src 0:57:2051  \"contract OffRamper {...\" */ 32, /** @src 0:2008:2042  \"EscrowRefunded(user, refundAmount)\" */ 0x894ce7cc354d2a39de53f8dab6b0ad8c5ac65641e68aa2154fdb88bcc387e3dd, _14)\n                        /// @src 0:57:2051  \"contract OffRamper {...\"\n                        return(0, 0)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220f32cb6259aba8a08ad77c7d532fd00cd072449eb556bb974c763f96e8469acde64736f6c63430008180033\"\n    }\n}\n",
        "hash": "0100008353b89612abd928d0795219d329eb962ece0f2c25b00ac2b1224baa9f",
        "factoryDependencies": {}
      }
    }
  },
  "sources": {
    "src/OffRamper.sol": {
      "id": 0,
      "ast": {
        "absolutePath": "src/OffRamper.sol",
        "exportedSymbols": {
          "OffRamper": [
            142
          ]
        },
        "id": 143,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 1,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".0"
            ],
            "nodeType": "PragmaDirective",
            "src": "32:23:0"
          },
          {
            "abstract": false,
            "baseContracts": [],
            "canonicalName": "OffRamper",
            "contractDependencies": [],
            "contractKind": "contract",
            "fullyImplemented": true,
            "id": 142,
            "linearizedBaseContracts": [
              142
            ],
            "name": "OffRamper",
            "nameLocation": "66:9:0",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 5,
                "mutability": "mutable",
                "name": "escrowBalances",
                "nameLocation": "118:14:0",
                "nodeType": "VariableDeclaration",
                "scope": 142,
                "src": "82:50:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "typeName": {
                  "id": 4,
                  "keyName": "",
                  "keyNameLocation": "-1:-1:-1",
                  "keyType": {
                    "id": 2,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "90:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "82:27:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "valueName": "",
                  "valueNameLocation": "-1:-1:-1",
                  "valueType": {
                    "id": 3,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "101:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                "visibility": "private"
              },
              {
                "anonymous": false,
                "eventSelector": "894ce7cc354d2a39de53f8dab6b0ad8c5ac65641e68aa2154fdb88bcc387e3dd",
                "id": 11,
                "name": "EscrowRefunded",
                "nameLocation": "246:14:0",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 10,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 7,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "user",
                      "nameLocation": "277:4:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 11,
                      "src": "261:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 6,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "261:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 9,
                      "indexed": false,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "291:6:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 11,
                      "src": "283:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 8,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "283:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "260:38:0"
                },
                "src": "240:59:0"
              },
              {
                "anonymous": false,
                "eventSelector": "2acc6f4d477bb2469e2a36739daff7c473cb76338817ff2877973ed2bb9f9db6",
                "id": 17,
                "name": "OffRampIntentCreated",
                "nameLocation": "310:20:0",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 16,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 13,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "user",
                      "nameLocation": "347:4:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 17,
                      "src": "331:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 12,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "331:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 15,
                      "indexed": false,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "361:6:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 17,
                      "src": "353:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 14,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "353:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "330:38:0"
                },
                "src": "304:65:0"
              },
              {
                "anonymous": false,
                "eventSelector": "eed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb",
                "id": 25,
                "name": "FundsReleased",
                "nameLocation": "380:13:0",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 24,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 19,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "offRamperAddress",
                      "nameLocation": "410:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 25,
                      "src": "394:32:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 18,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "394:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 21,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "onRamperAddress",
                      "nameLocation": "443:15:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 25,
                      "src": "427:31:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 20,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "427:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 23,
                      "indexed": false,
                      "mutability": "mutable",
                      "name": "releaseAmount",
                      "nameLocation": "468:13:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 25,
                      "src": "460:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 22,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "460:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "393:89:0"
                },
                "src": "374:109:0"
              },
              {
                "body": {
                  "id": 51,
                  "nodeType": "Block",
                  "src": "677:242:0",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 36,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 33,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "708:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 34,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "712:5:0",
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "708:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 35,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 29,
                              "src": "721:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "708:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "53656e742076616c756520646f6573206e6f74206d61746368207468652073706563696669656420616d6f756e74",
                            "id": 37,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "741:48:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_294574fc8fa6f11be3e2f5b19e8b3500d37bc72db6c2f27434ef9573f001a269",
                              "typeString": "literal_string \"Sent value does not match the specified amount\""
                            },
                            "value": "Sent value does not match the specified amount"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_294574fc8fa6f11be3e2f5b19e8b3500d37bc72db6c2f27434ef9573f001a269",
                              "typeString": "literal_string \"Sent value does not match the specified amount\""
                            }
                          ],
                          "id": 32,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "687:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 38,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "687:112:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 39,
                      "nodeType": "ExpressionStatement",
                      "src": "687:112:0"
                    },
                    {
                      "expression": {
                        "id": 44,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 40,
                            "name": "escrowBalances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5,
                            "src": "809:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 42,
                          "indexExpression": {
                            "id": 41,
                            "name": "offRamperAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 27,
                            "src": "824:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "809:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "+=",
                        "rightHandSide": {
                          "id": 43,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29,
                          "src": "845:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "809:42:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 45,
                      "nodeType": "ExpressionStatement",
                      "src": "809:42:0"
                    },
                    {
                      "eventCall": {
                        "arguments": [
                          {
                            "id": 47,
                            "name": "offRamperAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 27,
                            "src": "887:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 48,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 29,
                            "src": "905:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 46,
                          "name": "OffRampIntentCreated",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 17,
                          "src": "866:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 49,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "866:46:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 50,
                      "nodeType": "EmitStatement",
                      "src": "861:51:0"
                    }
                  ]
                },
                "functionSelector": "d5a6c4d7",
                "id": 52,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "newOffRampIntent",
                "nameLocation": "579:16:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 30,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 27,
                      "mutability": "mutable",
                      "name": "offRamperAddress",
                      "nameLocation": "613:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 52,
                      "src": "605:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 26,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "605:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 29,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "647:6:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 52,
                      "src": "639:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 28,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "639:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "595:64:0"
                },
                "returnParameters": {
                  "id": 31,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "677:0:0"
                },
                "scope": 142,
                "src": "570:349:0",
                "stateMutability": "payable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 90,
                  "nodeType": "Block",
                  "src": "1147:346:0",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 66,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "baseExpression": {
                                "id": 62,
                                "name": "escrowBalances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 5,
                                "src": "1178:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 64,
                              "indexExpression": {
                                "id": 63,
                                "name": "offRamperAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 54,
                                "src": "1193:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1178:32:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "id": 65,
                              "name": "releaseAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 58,
                              "src": "1214:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "1178:49:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "52656c6561736520616d6f756e74206578636565647320657363726f772062616c616e6365",
                            "id": 67,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1241:39:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c063333eb8487ab61c8aa6b191303ea19f0b38cae950bc96c1bf1f8b56369fc3",
                              "typeString": "literal_string \"Release amount exceeds escrow balance\""
                            },
                            "value": "Release amount exceeds escrow balance"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_c063333eb8487ab61c8aa6b191303ea19f0b38cae950bc96c1bf1f8b56369fc3",
                              "typeString": "literal_string \"Release amount exceeds escrow balance\""
                            }
                          ],
                          "id": 61,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "1157:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 68,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1157:133:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 69,
                      "nodeType": "ExpressionStatement",
                      "src": "1157:133:0"
                    },
                    {
                      "expression": {
                        "id": 74,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 70,
                            "name": "escrowBalances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5,
                            "src": "1301:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 72,
                          "indexExpression": {
                            "id": 71,
                            "name": "offRamperAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 54,
                            "src": "1316:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "1301:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "-=",
                        "rightHandSide": {
                          "id": 73,
                          "name": "releaseAmount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 58,
                          "src": "1337:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1301:49:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 75,
                      "nodeType": "ExpressionStatement",
                      "src": "1301:49:0"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 81,
                            "name": "releaseAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 58,
                            "src": "1394:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "id": 78,
                                "name": "onRamperAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 56,
                                "src": "1368:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 77,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1360:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_payable_$",
                                "typeString": "type(address payable)"
                              },
                              "typeName": {
                                "id": 76,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1360:8:0",
                                "stateMutability": "payable",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 79,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1360:24:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "id": 80,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1385:8:0",
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "src": "1360:33:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                            "typeString": "function (uint256)"
                          }
                        },
                        "id": 82,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1360:48:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 83,
                      "nodeType": "ExpressionStatement",
                      "src": "1360:48:0"
                    },
                    {
                      "eventCall": {
                        "arguments": [
                          {
                            "id": 85,
                            "name": "offRamperAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 54,
                            "src": "1437:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 86,
                            "name": "onRamperAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 56,
                            "src": "1455:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 87,
                            "name": "releaseAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 58,
                            "src": "1472:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 84,
                          "name": "FundsReleased",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 25,
                          "src": "1423:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 88,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1423:63:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 89,
                      "nodeType": "EmitStatement",
                      "src": "1418:68:0"
                    }
                  ]
                },
                "functionSelector": "5e12b628",
                "id": 91,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "releasePartialFundsToOnRamper",
                "nameLocation": "1004:29:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 59,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 54,
                      "mutability": "mutable",
                      "name": "offRamperAddress",
                      "nameLocation": "1051:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 91,
                      "src": "1043:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 53,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1043:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 56,
                      "mutability": "mutable",
                      "name": "onRamperAddress",
                      "nameLocation": "1085:15:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 91,
                      "src": "1077:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 55,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1077:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 58,
                      "mutability": "mutable",
                      "name": "releaseAmount",
                      "nameLocation": "1118:13:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 91,
                      "src": "1110:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 57,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1110:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1033:104:0"
                },
                "returnParameters": {
                  "id": 60,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1147:0:0"
                },
                "scope": 142,
                "src": "995:498:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 102,
                  "nodeType": "Block",
                  "src": "1625:44:0",
                  "statements": [
                    {
                      "expression": {
                        "baseExpression": {
                          "id": 98,
                          "name": "escrowBalances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5,
                          "src": "1642:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 100,
                        "indexExpression": {
                          "id": 99,
                          "name": "user",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 93,
                          "src": "1657:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1642:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 97,
                      "id": 101,
                      "nodeType": "Return",
                      "src": "1635:27:0"
                    }
                  ]
                },
                "functionSelector": "6374b11b",
                "id": 103,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getEscrowBalance",
                "nameLocation": "1564:16:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 94,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 93,
                      "mutability": "mutable",
                      "name": "user",
                      "nameLocation": "1589:4:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 103,
                      "src": "1581:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 92,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1581:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1580:14:0"
                },
                "returnParameters": {
                  "id": 97,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 96,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 103,
                      "src": "1616:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 95,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1616:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1615:9:0"
                },
                "scope": 142,
                "src": "1555:114:0",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 140,
                  "nodeType": "Block",
                  "src": "1802:247:0",
                  "statements": [
                    {
                      "assignments": [
                        109
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 109,
                          "mutability": "mutable",
                          "name": "refundAmount",
                          "nameLocation": "1820:12:0",
                          "nodeType": "VariableDeclaration",
                          "scope": 140,
                          "src": "1812:20:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 108,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "1812:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 113,
                      "initialValue": {
                        "baseExpression": {
                          "id": 110,
                          "name": "escrowBalances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5,
                          "src": "1835:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 112,
                        "indexExpression": {
                          "id": 111,
                          "name": "user",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 105,
                          "src": "1850:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1835:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "1812:43:0"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 117,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 115,
                              "name": "refundAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 109,
                              "src": "1873:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 116,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1888:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "1873:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "4e6f2066756e647320746f20726566756e64",
                            "id": 118,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1891:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_b9cdfc63dfb766ee27a858d6abae692f4fe9e76513644bb033eebf5bf2b362e3",
                              "typeString": "literal_string \"No funds to refund\""
                            },
                            "value": "No funds to refund"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_b9cdfc63dfb766ee27a858d6abae692f4fe9e76513644bb033eebf5bf2b362e3",
                              "typeString": "literal_string \"No funds to refund\""
                            }
                          ],
                          "id": 114,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "1865:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 119,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1865:47:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 120,
                      "nodeType": "ExpressionStatement",
                      "src": "1865:47:0"
                    },
                    {
                      "expression": {
                        "id": 125,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 121,
                            "name": "escrowBalances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5,
                            "src": "1923:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 123,
                          "indexExpression": {
                            "id": 122,
                            "name": "user",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 105,
                            "src": "1938:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "1923:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "hexValue": "30",
                          "id": 124,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1946:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1923:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 126,
                      "nodeType": "ExpressionStatement",
                      "src": "1923:24:0"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 132,
                            "name": "refundAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 109,
                            "src": "1980:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "id": 129,
                                "name": "user",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 105,
                                "src": "1965:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 128,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1957:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_payable_$",
                                "typeString": "type(address payable)"
                              },
                              "typeName": {
                                "id": 127,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1957:8:0",
                                "stateMutability": "payable",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 130,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1957:13:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "id": 131,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1971:8:0",
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "src": "1957:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                            "typeString": "function (uint256)"
                          }
                        },
                        "id": 133,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1957:36:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 134,
                      "nodeType": "ExpressionStatement",
                      "src": "1957:36:0"
                    },
                    {
                      "eventCall": {
                        "arguments": [
                          {
                            "id": 136,
                            "name": "user",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 105,
                            "src": "2023:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 137,
                            "name": "refundAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 109,
                            "src": "2029:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 135,
                          "name": "EscrowRefunded",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 11,
                          "src": "2008:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 138,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2008:34:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 139,
                      "nodeType": "EmitStatement",
                      "src": "2003:39:0"
                    }
                  ]
                },
                "functionSelector": "f376d8ac",
                "id": 141,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "refundEscrowBalance",
                "nameLocation": "1759:19:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 106,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 105,
                      "mutability": "mutable",
                      "name": "user",
                      "nameLocation": "1787:4:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 141,
                      "src": "1779:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 104,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1779:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1778:14:0"
                },
                "returnParameters": {
                  "id": 107,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1802:0:0"
                },
                "scope": 142,
                "src": "1750:299:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              }
            ],
            "scope": 143,
            "src": "57:1994:0",
            "usedErrors": [],
            "usedEvents": [
              11,
              17,
              25
            ]
          }
        ],
        "src": "32:2020:0"
      }
    }
  },
  "errors": [
    {
      "component": "general",
      "errorCode": null,
      "formattedMessage": "\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are using '<address payable>.send/transfer(<X>)' without providing    │\n│ the gas amount. Such calls will fail depending on the pubdata costs.                             │\n│ This might be a false positive if you are using an interface (like IERC20) instead of the        │\n│ native Solidity `send/transfer`.                                                                 │\n│ Please use 'payable(<address>).call{value: <X>}(\"\")' instead, but be careful with the reentrancy │\n│ attack. `send` and `transfer` send limited amount of gas that prevents reentrancy, whereas       │\n│ `<address>.call{value: <X>}` sends all gas to the callee. Learn more on                          │\n│ https://docs.soliditylang.org/en/latest/security-considerations.html#reentrancy                  │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n--> src/OffRamper.sol\n",
      "message": "\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are using '<address payable>.send/transfer(<X>)' without providing    │\n│ the gas amount. Such calls will fail depending on the pubdata costs.                             │\n│ This might be a false positive if you are using an interface (like IERC20) instead of the        │\n│ native Solidity `send/transfer`.                                                                 │\n│ Please use 'payable(<address>).call{value: <X>}(\"\")' instead, but be careful with the reentrancy │\n│ attack. `send` and `transfer` send limited amount of gas that prevents reentrancy, whereas       │\n│ `<address>.call{value: <X>}` sends all gas to the callee. Learn more on                          │\n│ https://docs.soliditylang.org/en/latest/security-considerations.html#reentrancy                  │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘",
      "severity": "warning",
      "sourceLocation": {
        "file": "0",
        "start": 1360,
        "end": 1408
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "errorCode": null,
      "formattedMessage": "\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are using '<address payable>.send/transfer(<X>)' without providing    │\n│ the gas amount. Such calls will fail depending on the pubdata costs.                             │\n│ This might be a false positive if you are using an interface (like IERC20) instead of the        │\n│ native Solidity `send/transfer`.                                                                 │\n│ Please use 'payable(<address>).call{value: <X>}(\"\")' instead, but be careful with the reentrancy │\n│ attack. `send` and `transfer` send limited amount of gas that prevents reentrancy, whereas       │\n│ `<address>.call{value: <X>}` sends all gas to the callee. Learn more on                          │\n│ https://docs.soliditylang.org/en/latest/security-considerations.html#reentrancy                  │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n--> src/OffRamper.sol\n",
      "message": "\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are using '<address payable>.send/transfer(<X>)' without providing    │\n│ the gas amount. Such calls will fail depending on the pubdata costs.                             │\n│ This might be a false positive if you are using an interface (like IERC20) instead of the        │\n│ native Solidity `send/transfer`.                                                                 │\n│ Please use 'payable(<address>).call{value: <X>}(\"\")' instead, but be careful with the reentrancy │\n│ attack. `send` and `transfer` send limited amount of gas that prevents reentrancy, whereas       │\n│ `<address>.call{value: <X>}` sends all gas to the callee. Learn more on                          │\n│ https://docs.soliditylang.org/en/latest/security-considerations.html#reentrancy                  │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘",
      "severity": "warning",
      "sourceLocation": {
        "file": "0",
        "start": 1957,
        "end": 1993
      },
      "type": "Warning"
    }
  ],
  "version": "0.8.24",
  "long_version": "0.8.24+commit.e11b9ed9.Darwin.appleclang",
  "zk_version": "1.4.0"
}