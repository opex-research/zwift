{
  "language": "Solidity",
  "sources": {
    "src/OffRamper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract OffRamper {\n    mapping(address => uint256) private escrowBalances; // Direct representation of the funds that users have committed to the contract, awaiting onramps.\n\n\n\n    event EscrowRefunded(address indexed user, uint256 amount);\n    event OffRampIntentCreated(address indexed user, uint256 amount);\n    event FundsReleased(address indexed offRamperAddress,address indexed onRamperAddress, uint256 releaseAmount);\n\n    // Function to create a new off-ramp intent and add funds to a user's escrow\n    function newOffRampIntent(\n        address offRamperAddress,\n        uint256 amount\n    ) external payable {\n        require(\n            msg.value == amount,\n            \"Sent value does not match the specified amount\"\n        );\n        escrowBalances[offRamperAddress] += amount;\n        emit OffRampIntentCreated(offRamperAddress, amount);\n    }\n\n    // Function to release funds from a user's escrow to an on-ramper\n    function releasePartialFundsToOnRamper(\n        address offRamperAddress,\n        address onRamperAddress,\n        uint256 releaseAmount\n    ) external {\n        require(\n            escrowBalances[offRamperAddress] >= releaseAmount,\n            \"Release amount exceeds escrow balance\"\n        );\n\n        escrowBalances[offRamperAddress] -= releaseAmount;\n        payable(onRamperAddress).transfer(releaseAmount);\n        emit FundsReleased(offRamperAddress, onRamperAddress, releaseAmount);\n    }\n\n    // Utility function to view a user's escrow balance\n    function getEscrowBalance(address user) public view returns (uint256) {\n        return escrowBalances[user];\n    }\n\n    // Optional: Function to refund the remaining escrow balance to a user\n    function refundEscrowBalance(address user) external {\n        uint256 refundAmount = escrowBalances[user];\n        require(refundAmount > 0, \"No funds to refund\");\n\n        escrowBalances[user] = 0;\n        payable(user).transfer(refundAmount);\n        emit EscrowRefunded(user, refundAmount);\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/"
    ],
    "optimizer": {
      "enabled": true,
      "mode": "3",
      "details": null,
      "fallbackToOptimizingForSize": false,
      "disableSystemRequestMemoization": true
    },
    "outputSelection": {
      "*": {
        "": [
          "metadata"
        ],
        "*": [
          "abi",
          "evm.methodIdentifiers"
        ]
      }
    },
    "libraries": {},
    "isSystem": false,
    "forceEvmla": false,
    "areLibrariesMissing": false
  }
}